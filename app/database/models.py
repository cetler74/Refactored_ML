from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, ForeignKey, Enum
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

from app.database.manager import Base

class OrderType(enum.Enum):
    MARKET = "market"
    LIMIT = "limit"
    STOP_LOSS = "stop_loss"
    TAKE_PROFIT = "take_profit"

class TradeType(enum.Enum):
    BUY = "buy"
    SELL = "sell"

class TradeStatus(enum.Enum):
    OPEN = "open"
    CLOSED = "closed"
    CANCELLED = "cancelled"

class MarketData(Base):
    """Model for storing market data (OHLCV)."""
    __tablename__ = "market_data"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    exchange = Column(String(50), nullable=False)
    symbol = Column(String(20), nullable=False, index=True)
    timeframe = Column(String(10), nullable=False, index=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    open = Column(Float, nullable=False)
    high = Column(Float, nullable=False)
    low = Column(Float, nullable=False)
    close = Column(Float, nullable=False)
    volume = Column(Float, nullable=False)
    
    # Additional fields for technical indicators
    rsi = Column(Float, nullable=True)
    macd = Column(Float, nullable=True)
    macd_signal = Column(Float, nullable=True)
    macd_hist = Column(Float, nullable=True)
    ema_9 = Column(Float, nullable=True)
    ema_21 = Column(Float, nullable=True)
    sma_50 = Column(Float, nullable=True)
    sma_200 = Column(Float, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def __repr__(self):
        return f"<MarketData(exchange='{self.exchange}', symbol='{self.symbol}', timeframe='{self.timeframe}', timestamp='{self.timestamp}')>"

class Trade(Base):
    """Model for storing trade information."""
    __tablename__ = "trades"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    exchange = Column(String(50), nullable=False)
    symbol = Column(String(20), nullable=False, index=True)
    trade_type = Column(Enum(TradeType), nullable=False)
    order_type = Column(Enum(OrderType), nullable=False)
    status = Column(Enum(TradeStatus), nullable=False, default=TradeStatus.OPEN)
    
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float, nullable=True)
    amount = Column(Float, nullable=False)
    fee = Column(Float, default=0.0)
    
    entry_time = Column(DateTime, nullable=False, default=datetime.utcnow)
    exit_time = Column(DateTime, nullable=True)
    
    stop_loss = Column(Float, nullable=True)
    take_profit = Column(Float, nullable=True)
    
    realized_pnl = Column(Float, nullable=True)
    realized_pnl_pct = Column(Float, nullable=True)
    
    # Trade metadata
    strategy = Column(String(50), nullable=True)
    timeframe = Column(String(10), nullable=True)
    note = Column(String(200), nullable=True)
    simulation = Column(Boolean, default=False)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    # signals = relationship("Signal", back_populates="trade")
    
    def __repr__(self):
        return f"<Trade(id={self.id}, symbol='{self.symbol}', trade_type='{self.trade_type}', status='{self.status}')>"

class Signal(Base):
    """Model for storing trading signals generated by strategies and ML models."""
    __tablename__ = "signals"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    symbol = Column(String(20), nullable=False, index=True)
    timeframe = Column(String(10), nullable=False)
    timestamp = Column(DateTime, nullable=False, index=True)
    
    trade_type = Column(Enum(TradeType), nullable=False)
    confidence = Column(Float, nullable=False)  # ML confidence score (0-1)
    price = Column(Float, nullable=False)
    
    # Signal source
    strategy = Column(String(50), nullable=False)
    model = Column(String(50), nullable=True)  # ML model that generated the signal, if any
    
    # Signal status
    is_executed = Column(Boolean, default=False)
    trade_id = Column(Integer, ForeignKey("trades.id"), nullable=True)
    
    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    # trade = relationship("Trade", back_populates="signals")
    
    def __repr__(self):
        return f"<Signal(symbol='{self.symbol}', trade_type='{self.trade_type}', confidence={self.confidence}, executed={self.is_executed})>"

class Balance(Base):
    """Model for storing balance snapshots."""
    __tablename__ = "balances"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    exchange = Column(String(50), nullable=False)
    asset = Column(String(10), nullable=False, index=True)
    free = Column(Float, nullable=False)
    used = Column(Float, nullable=False)
    total = Column(Float, nullable=False)
    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow, index=True)
    
    # For simulation
    is_simulated = Column(Boolean, default=False)
    
    def __repr__(self):
        return f"<Balance(exchange='{self.exchange}', asset='{self.asset}', total={self.total}, timestamp='{self.timestamp}')>"

class MLModel(Base):
    """Model for storing ML model metadata."""
    __tablename__ = "ml_models"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(100), nullable=False)
    version = Column(String(20), nullable=False)
    type = Column(String(50), nullable=False)  # LSTM, RandomForest, etc.
    description = Column(String(200), nullable=True)
    
    # Model metrics
    accuracy = Column(Float, nullable=True)
    precision = Column(Float, nullable=True)
    recall = Column(Float, nullable=True)
    f1_score = Column(Float, nullable=True)
    
    # Model paths
    model_path = Column(String(200), nullable=False)
    
    # Training info
    training_start = Column(DateTime, nullable=True)
    training_end = Column(DateTime, nullable=True)
    symbols = Column(String(200), nullable=True)  # Comma-separated list of symbols used for training
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def __repr__(self):
        return f"<MLModel(name='{self.name}', version='{self.version}', type='{self.type}')>" 